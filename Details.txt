

1. Для работи нашого сервісу створимо asp.net core api - для опрацювання запиті від користувача та 
   реалізацію іншої потрібної логіки (реєстрація та авторизація користуваців та т.і.).

2. Враховуючи те, що SDK від Tuya для .Net не створено - будемо використовувати для js - для чого 
   створимо окремий сервіс на node.js - для цього:
   - строрюємо окрему директорію у нашому рішенні - TuyaNodeSevice;
   - ініціалізуємо npm - npm init -y; (створюється package.json));
   - встановлюємо потрібні пакет - npm install express @tuya/tuya-connector-nodejs;
   - додати в проет пакет dotenv - для роботи з конфіденційною інформацією - npm install dotenv;
   - створюємо файл .env - в якому зберігатимемо конфіденційну інформацію (acces_key,secret_key,base_url та інше);
   - створюємо файл index.js - в якому буде реалізована логіка для роботи з Tuya SDK;
   - додаємо в package.json скрипт для запуску нашого сервісу:
     "scripts": {"start": "node index.js"}
   - запускаємо наш сервіс - npm start;


   3. На першому етапі налаштуємо роботу express сервера  на виконання запитів на включення, виключення пристою,
      а такаж отримання статусу пристрою. Для цього використовується Tuya SDK та класс TuyaContext.
      Реалізуємо три методи - on, off, status - які будуть виконувати відповідні дії.
   4.  В Asp.Net Core Api створюємо контролер TuyaController, та методи GetStatus, SwitchRelay
       які будуть виконувати запити до нашого сервісу на node.js - для цього використовуємо HttpClient.

       Після того, як все налаштували та перевірили, продовжуємо розширювати функціонал - додаємо
       можливість отримувати сповіщення про зміну статусу пристрою - для цього використовуємо додаткові інструменти
       на стороні express сервера.

   5. Для реалізації додаткових можливостей - копіюємо директорію із github в окрему директорію нашого рішення 
      tuya-pulsar-ws-node. Далі за рахунок імпорту потрібних класів та методів реалізуємо роботу-  а саме
      сторюємо обєкт класу TuyaWebSocket - та використовуємо методи цього класу для отримання сповіщень.
      Для пробросу цих данних строрюємо метод sendToServer - який буде відправляти данні на наш asp.net core api за 
      адресою http://localhost:5000/api/tuya/events.

      В asp.net core api створюємо метод GetEvents - який буде приймати ці данні та обробляти їх, а також повертати
      повідомлення серверу express серверу про отримання ціх данних.

      Після цього ми зможемо отримувати сповіщення про зміну статусу пристрою в нашому asp.net core api.

    6. Далі реалізуємо логіки відправки повідомлень  до клієнта - для цього використовуємо SignalR.
         - встановлюємо пакет Microsoft.AspNetCore.SignalR;(dotnet add package Microsoft.AspNetCore.SignalR)
       В asp.net core api створюємо хаб TuyaHub - який буде відправляти повідомлення клієнту.
       В методі GetEvents викликаємо метод хабу для відправки повідомлення клієнту.

    7. встановлюємо бібліотеку EntityFrameworkCore.Tools та EntityFrameworkCore.SqlServer, AspNetCore.Authentigication.Bearer
      а далі створюємо дві дерикторіх - Entities та Enums.
      Додаємо класси  та енуми для зберігання інформації про користувачів та пристрої.
      створюємо сервіси та контроллери для класів








    8. Створюємо ui на React - встановлюємо mobeX та mobex-react-lite а також встановлюємо 
        пакет для роботи з signalR - @microsoft/signalr.
       Реалізуємо відображення повідомлень у реальному часі  у браузері.


    