// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHomeAsistent.Entities;

#nullable disable

namespace SmartHomeAsistent.Migrations
{
    [DbContext(typeof(TuyaDbContext))]
    partial class TuyaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountUser", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("SharedUsersId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "SharedUsersId");

                    b.HasIndex("SharedUsersId");

                    b.ToTable("AccountUser");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccesKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SwitchingPower")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.DeviceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceLogs");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.RelayCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandType")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Delay")
                        .HasColumnType("time");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("RelayScenarioId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("RelayScenarioId");

                    b.ToTable("RelayCommands");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.RelayScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RelayScenarios");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.UserDevice", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProvidedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("AccountUser", b =>
                {
                    b.HasOne("SmartHomeAsistent.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAsistent.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("SharedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.Account", b =>
                {
                    b.HasOne("SmartHomeAsistent.Entities.User", "Owner")
                        .WithMany("Accounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.Device", b =>
                {
                    b.HasOne("SmartHomeAsistent.Entities.Account", "Account")
                        .WithMany("Devices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.DeviceLog", b =>
                {
                    b.HasOne("SmartHomeAsistent.Entities.Device", "Device")
                        .WithMany("DeviceLogs")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.RelayCommand", b =>
                {
                    b.HasOne("SmartHomeAsistent.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAsistent.Entities.RelayScenario", "Scenario")
                        .WithMany("Commands")
                        .HasForeignKey("RelayScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartHomeAsistent.Entities.RepeatSettings", "RepeatSettings", b1 =>
                        {
                            b1.Property<int>("RelayCommandId")
                                .HasColumnType("int");

                            b1.Property<string>("DaysOfWeek")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DaysOfWeek");

                            b1.Property<bool>("IsInfinity")
                                .HasColumnType("bit");

                            b1.Property<int?>("RepeatCont")
                                .HasColumnType("int");

                            b1.Property<string>("SpecificDates")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SpecificDates");

                            b1.HasKey("RelayCommandId");

                            b1.ToTable("RelayCommands");

                            b1.WithOwner()
                                .HasForeignKey("RelayCommandId");
                        });

                    b.Navigation("Device");

                    b.Navigation("RepeatSettings")
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.RelayScenario", b =>
                {
                    b.HasOne("SmartHomeAsistent.Entities.User", "User")
                        .WithMany("RelayScenarios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.User", b =>
                {
                    b.HasOne("SmartHomeAsistent.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.UserDevice", b =>
                {
                    b.HasOne("SmartHomeAsistent.Entities.Device", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHomeAsistent.Entities.User", null)
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.Account", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.Device", b =>
                {
                    b.Navigation("DeviceLogs");

                    b.Navigation("UserDevices");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.RelayScenario", b =>
                {
                    b.Navigation("Commands");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartHomeAsistent.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("RelayScenarios");

                    b.Navigation("UserDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
